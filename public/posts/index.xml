<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ev-log</title>
    <link>/posts/</link>
    <description>Recent content in Posts on ev-log</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Mar 2024 16:18:13 +0200</lastBuildDate>
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web scraping with JS</title>
      <link>/posts/web_scraping_js/</link>
      <pubDate>Fri, 08 Mar 2024 16:18:13 +0200</pubDate>
      <guid>/posts/web_scraping_js/</guid>
      <description>&lt;h1 id=&#34;using-puppeteer-to-scrape-a-website&#34;&gt;Using Puppeteer to scrape a website&lt;/h1&gt;&#xA;&lt;p&gt;In this post we&amp;rsquo;ll scrape a website with puppeteer! In our case it will be &amp;lsquo;&lt;a href=&#34;https://books.toscrape.com/&#39;&#34;&gt;https://books.toscrape.com/&#39;&lt;/a&gt;,&#xA;great for trying stuff out since, in their own words, &amp;ldquo;We love being scraped!&amp;rdquo;. It&amp;rsquo;s a website that simulates&#xA;an online bookshop. Why scrape a website you might ask?&#xA;Well, in a business setting you could use it for price or news monitoring and general market research, getting some&#xA;info on your competitors :P&#xA;After having created a node project and installing puppeteer, we&amp;rsquo;ll jump right in. Here is the whole script,&#xA;I commented quite a lot so it should be easy to follow without making interludes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>systemd - Service</title>
      <link>/posts/systemd-service/</link>
      <pubDate>Mon, 25 Sep 2023 16:20:13 +0200</pubDate>
      <guid>/posts/systemd-service/</guid>
      <description>&lt;h1 id=&#34;services-under-systemd&#34;&gt;Services under systemd&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s been some time since my last post, I figured why not have a look at systemd? We&amp;rsquo;ll write a simple&#xA;service just to get a look at the basic functionality. For this purpose, let&amp;rsquo;s first write a Bash script&#xA;that our service can execute:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;while true&#xA;do&#xA;        echo Current time: $(date)&#xA;        sleep 5&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will, in an endless loop, echo the current date, including the time, then sleep for 5 seconds.&#xA;Save this as as sysdservice.sh (or whatever you want to name it).&#xA;Make our script executable with &amp;lsquo;chmod +x sysdservice.sh&amp;rsquo;. Go ahead and run the script to try for yourself!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Tutorial</title>
      <link>/posts/docker-tutorial/</link>
      <pubDate>Tue, 14 Mar 2023 08:10:40 +0200</pubDate>
      <guid>/posts/docker-tutorial/</guid>
      <description>&lt;h1 id=&#34;most-basic-docker-tutorial&#34;&gt;Most basic Docker tutorial&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s have a look at Docker! For this purpose we are going to run a simple Flask application from an Docker container.&#xA;At the end we will recap some basic terminology related to Docker. I have Docker already installed&#xA;and will not go through the installation process,&#xA;you can follow the official &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Docker documentation&lt;/a&gt;. First we have to look&#xA;for a base image we can use for our purposes. We&amp;rsquo;ll create a simple &amp;ldquo;Hello World&amp;rdquo; site with Flask,&#xA;a Python web framework, so let&amp;rsquo;s search for an image on the &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;.&#xA;We will use the official Python image:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python: C extensions</title>
      <link>/posts/python-cextension/</link>
      <pubDate>Tue, 10 Jan 2023 21:18:34 +0200</pubDate>
      <guid>/posts/python-cextension/</guid>
      <description>&lt;h1 id=&#34;python-series-part-2-c-extensions&#34;&gt;Python series, part 2: C Extensions&lt;/h1&gt;&#xA;&lt;p&gt;In the second part of the Python series, we will benchmark our Python code and see if we can speed it up&#xA;by writing a C extension. For this purpose, I wrote a function which, given a lower and upper bound,&#xA;returns the number of prime numbers in the given range. Also I wrote a small, simple function to measure&#xA;how much it takes to run the function ten times. The code is pretty straightforward, see below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python: venv</title>
      <link>/posts/python-venv/</link>
      <pubDate>Sat, 07 Jan 2023 20:22:38 +0200</pubDate>
      <guid>/posts/python-venv/</guid>
      <description>&lt;h1 id=&#34;python-series-part-1-venv&#34;&gt;Python series, part 1: venv&lt;/h1&gt;&#xA;&lt;p&gt;I&amp;rsquo;m planning a couple of posts about Python and we will start with a small and basic introduction&#xA;about venv. The reason for using venv is that we often want to use different versions of the same&#xA;Python package and venv is a built-in tool to create virtual environments for each project so that we&#xA;don&amp;rsquo;t run into version conflicts. There are other tools to accomplish the same (and more), but since venv comes&#xA;with the standard Python distribution, I prefer venv. In the next post I plan to write a small C extension.&#xA;With that out of the way, let&amp;rsquo;s jump right in! In your project folder (I named mine &amp;lsquo;cextension&amp;rsquo;),&#xA;issue the following command:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency basics in Go</title>
      <link>/posts/go-concurrency/</link>
      <pubDate>Sun, 13 Nov 2022 16:10:41 +0200</pubDate>
      <guid>/posts/go-concurrency/</guid>
      <description>&lt;h1 id=&#34;a-look-at-concurrency-primitives-in-go&#34;&gt;A look at concurrency primitives in Go&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take a look at concurrency primitives in Go: Goroutines, Channels and WaitGroups.&#xA;Here is a very simple program with no concurrency features which we will use to iterate on.&#xA;We call two functions, each printing a statement and sleeping for a second, from the main function,&#xA;which also prints a statement and the time it took the program to run in the end.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go: interfaces</title>
      <link>/posts/go-interfaces/</link>
      <pubDate>Sat, 29 Oct 2022 16:41:52 +0200</pubDate>
      <guid>/posts/go-interfaces/</guid>
      <description>&lt;h1 id=&#34;lets-have-a-first-look-at-interfaces-in-go&#34;&gt;Let&amp;rsquo;s have a first look at interfaces in Go&lt;/h1&gt;&#xA;&lt;p&gt;Suppose we have two structs, Manager and Developer, and we want to have a function, showInfo, that prints certain&#xA;information about them. To achieve this we have to use an interface (or generics, which are available since Go 1.18,&#xA;but I&amp;rsquo;ll leave that for another post). Without interfaces the code would look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manager&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;salary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;role&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;developer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;salary&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;role&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;manager&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manager&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We are only interested in name, salary and role of our employees&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showInfoM&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manager&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s, Salary: %d, Role: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;salary&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;role&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showInfoD&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;developer&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name: %s, Salary: %d, Role: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;salary&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;role&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;bob&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manager&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bob@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Manager&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;joe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;developer&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;joe@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Developer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;bob&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;marc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;developer&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Marc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4500&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;marc@example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Developer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;bob&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;showInfoM&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bob&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;showInfoD&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;joe&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;showInfoD&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;marc&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;</description>
    </item>
    <item>
      <title>HackerRank: List Replication in Haskell</title>
      <link>/posts/hackerrank-haskell/</link>
      <pubDate>Fri, 28 Oct 2022 19:20:11 +0200</pubDate>
      <guid>/posts/hackerrank-haskell/</guid>
      <description>&lt;h1 id=&#34;problem-description&#34;&gt;Problem description&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Given a list, repeat each element in the list n amount of times. The input and output portions will be &#xA;handled automatically by the grader. You need to write a function with the recommended method signature.&#xA;&#xA;Input Format&#xA;The first line contains the integer S where S is the number of times you need to repeat the elements.&#xA;The next X lines each contain an integer. These are the X elements in the array.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We want to iterate over the elements of the list and repeat each element n amount of times:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
